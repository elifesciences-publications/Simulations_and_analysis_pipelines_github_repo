%2017-03-28, EL: generate Fig. 4C, Fig. 4-figSup4A.
%Analyze entrainment simulations generated by
%runPhOsc_Boot_LinNLin_inKaiCPhaseUnits.m and generate figures.
%
% Modify SIMULATION_BOOT_NONLIN = load(FILENAME_1) and 
% SIMULATION_BOOT_LIN=load(FILENAME_2) lines to correspond to the outputs
% of your own simulation runs (automatically saved by
% runPhOsc_Boot_LinNLin_inKaiCPhaseUnits.m).
%
%dependencies: export_fig.m from FileExchange to export figures.

clear all;
close all;
clc;

INDIR = ['.'];
cd(INDIR);
toexp_VitroSilico = 1; %export figs?

%% load simulation results
SIMULATION_BOOT_NONLIN = load(['2017-04-01_16.55.00_NonLin_FAST_4.mat']); 
SIMULATION_BOOT_LIN = load(['2017-04-01_16.55.07_Lin_FAST_4.mat']);

TOLOAD_OLD_SIMULATION_ONE = 1; %plot data from first simulation? (1=yes)
TOLOAD_OLD_SIMULATION_TWO = 1; %plot data from second simulation? (1=yes)

%% load in vitro data from entrainment expt. (Fig. 2-figSup2)
load(['../helper functions and shared files/'...
    '2017-03-17_inVitroPP_fits_eachExpOwnPer_03.53.51.mat']); 

%add (7/6)*pi to make step fun data to correspond to KaiC phosphorylation phases
vitro.dawnPhase = vitro.dawnPhase + (7*pi/6); 

%% load results of first simulation here
if TOLOAD_OLD_SIMULATION_ONE == 1
    SIMULATION_BOOT = SIMULATION_BOOT_NONLIN;
    SIM = SIMULATION_BOOT.VAR;
    dawnphase = SIM.dawnphase;
    duskphase = SIM.duskphase;
    duskphaseshift = SIM.duskphaseshift;
    dawnphaseshift = SIM.dawnphaseshift;
    peakT = SIM.peakT;
    TDRIVE=SIM.TDRIVE; %24.0;
    dutyfrac=SIM.dutyfrac; %[4:1:18]/24;
    numcyc = SIM.numcyc; %1:20;
    TEND = SIM.TEND; %max(numcyc)*TDRIVE;
    boot = SIM.boot;
end

%% collect variables for plotting
plotphase = dawnphase+dawnphaseshift;
plotphase = mod(plotphase,1);
plotphase(plotphase > 0.2) = plotphase(plotphase > 0.2) - 1;

%% select only those tau's where entrained stably
STDEV_LIM = 0.1;

NUMENTR=4; %for nonlinear case
for b=boot
    for df=1:numel(dutyfrac)
        plotphase_stdev(df,b) = std(squeeze(plotphase(df,(end-NUMENTR):end,b)));
        [~,plotphase_stdev(df,b),~] = ...
            circleMean(squeeze(plotphase(df,(end-NUMENTR):end,b)),1,[]);
        if plotphase_stdev(df,b) > STDEV_LIM
            entrained(df,b) = 0;
        else
            entrained(df,b) = 1;
        end
    end
end

%display some entrainment stats
disp(['Total no. sims.: ' num2str(numel(entrained))]);
disp(['No. entrained sims.: ' num2str(sum(sum(entrained)))]);
disp(['Frac entrained: ' num2str(...
    sum(sum(entrained))/...
    numel(entrained)...
    )]);

%specifically for tau between 8 and 16
gf = dutyfrac <= 16/24 & dutyfrac >= 8/24;
disp(['Total no. sims. tau=6-18: ' num2str(numel(entrained(gf,:)))]);
disp(['No. entrained sims. tau=6-18: ' num2str(sum(sum(entrained(gf,:))))]);
disp(['Frac entrained tau=6-18: ' num2str(...
    sum(sum(entrained(gf,:)))/...
    numel(entrained(gf,:))...
    )]);

%% figure out how quickly you entrain
pstdev=[];
numToEnt=[];
NME=3;

for b=boot
    for df=1:numel(dutyfrac)
        for n=1:numel(numcyc)-NME
            %pstdev(df,b,n) = std(squeeze(plotphase(df,n:n+NME,b)));
            [~,pstdev(df,b,n),~] = ...
                circleMean(squeeze(plotphase(df,n:n+NME,b)),1,[]);
        end
        
        %find index of
        nte = find(pstdev(df,b,:) <= STDEV_LIM,1,'first');
        if ~isempty(nte)
            numToEnt(b,df) = numcyc(nte);
        else
            numToEnt(b,df) = nan;
        end
    end
end

%% sum all those entrained within 3 cycles, and find how many unentr
%for daylengths 6-18 hrs
gf = dutyfrac <= 18/24 & dutyfrac >= 6/24;
gNumToEnt = numToEnt(:,gf);

num1to3 = sum(sum(gNumToEnt == 1 | gNumToEnt == 2 | gNumToEnt == 3));
numNan = sum(sum(isnan(gNumToEnt)));
numNet = numel(gNumToEnt);
fracQuick = num1to3/numNet;
fracQuick_notNan = num1to3/(numNet-numNan);
disp([num2str(fracQuick) ' frac. entrained within 3 cycles']);
disp([num2str(fracQuick_notNan) ' frac. entrained w/in 3cyc out of nonNan']);


%% plot avg phase+/-std for entrained tau's for entire boostrapped set

%convert phases to peak times
fvec = (@(x) (0.5-x)/(1/24));
z = 1/(2*pi); %conversion factor from rad. to cycles

vitro.dawnPhase = wrapVecAround(vitro.dawnPhase,0.2*2*pi,2*pi,'gt');
plotphase = mod(plotphase,1);

%go through dfs, collect [tau, taustd]
for df=1:numel(dutyfrac)
    tau(df) = dutyfrac(df);
    entr = logical(entrained(df,:));
    goodph = squeeze(plotphase(df,end,entr));
    %goodph = goodph(goodph < 0.33);
    %     taumean(df) = nanmean(goodph);
    %     taustd(df) = nanstd(goodph);
    [taumean(df), taustd(df), taubreakpt(df)] = circleMean(goodph, 1, []);
end
plotphase(plotphase < 0.2) = plotphase(plotphase < 0.2) -1;
%taumean(taumean < 0.2) = taumean(taumean < 0.2) - 1;

%add pts for filled area polygon for std deviations
yHi = taumean + taustd;
yLo = taumean - taustd;
yHi2 = taumean + 2*taustd;
yLo2 = taumean - 2*taustd;

fErrorBar = figure();
blueCol = cold(100);
lightBlue = [217 229 240]/255;
darkBlue = [191 209 229]/255;
pFill2 = fill(24*[tau fliplr(tau)],fvec([yHi2 fliplr(yLo2)]),...
    lightBlue,...
    'linestyle','none');
hold on;
pFill = fill(24*[tau fliplr(tau)],fvec([yHi fliplr(yLo)]), ...
    darkBlue,...
    'linestyle','none','facealpha',0.5);
hold on;

pJanVitro = errorbar(vitro.pp(vitro.janGoodPlt),...
     fvec(z*vitro.dawnPhase(vitro.janGoodPlt)),...
     24*z*vitro.fitPhase_Err(vitro.janGoodPlt), 'bs',...
    'markersize',4,'markerfacecolor','none',...
    'markeredgecolor','b','linewidth',1);

% pJanPk = errorbar(vitro.pp(vitro.janGoodPlt),...
%     vitro.pkT(vitro.janGoodPlt)-8,...
%     vitro.pkT_Err(vitro.janGoodPlt),'r-');
% pMarPk = errorbar(vitro.pp(vitro.marGoodPlt),...
%     vitro.pkT(vitro.marGoodPlt)-8,...
%     vitro.pkT_Err(vitro.marGoodPlt),'c-');

hold on;
pMarVitro = errorbar(vitro.pp(vitro.marGoodPlt),...
    fvec(z*vitro.dawnPhase(vitro.marGoodPlt)),...
    24*z*vitro.fitPhase_Err(vitro.marGoodPlt), 'bo',...
    'markersize',3,'markerfacecolor','b',...
    'markeredgecolor','b','linewidth',1);

legend([pMarVitro,pFill, pFill2],...
    'in vitro','simulation \pm \sigma','simulation \pm 2\sigma',...
    'location','southeast');
legend boxoff;
xlabel('day length \tau (hours)');
ylabel('peak time t_{pk} (hours after dawn)');
set(gca,'xlim',[0 24],'ylim',sort(fvec([-0.5 0.5])),...
    'xtick',0:6:24,'ytick',sort(fvec([-1:0.25:1])));
%axis('equal');
grid off;
set(fErrorBar,'units','inches','position',[0 0 4 3]);
%%
if toexp_VitroSilico == 1
    export_fig([pwd '/' getDate('yyyy-mm-dd') '_fInVitroSilico_'...
        'NonParamBoot' num2str(max(boot)) '_ErrorBarShaded_' ...
        getDate('HH.MM.SS')],...
        '-cmyk','-painters','-pdf',fErrorBar);
end

%% proceed only if have a second simulation set to load (e.g., linearized step funs)
if TOLOAD_OLD_SIMULATION_TWO == 1
    SIMULATION_BOOT = SIMULATION_BOOT_LIN;
    SIM = SIMULATION_BOOT.VAR;
    dawnphase = SIM.dawnphase;
    duskphase = SIM.duskphase;
    duskphaseshift = SIM.duskphaseshift;
    dawnphaseshift = SIM.dawnphaseshift;
    peakT = SIM.peakT;
    TDRIVE=SIM.TDRIVE; %24.0;
    dutyfrac=SIM.dutyfrac; %[4:1:18]/24;
    numcyc = SIM.numcyc; %1:20;
    TEND = SIM.TEND; %max(numcyc)*TDRIVE;
    boot = SIM.boot;
    
    %% collect variables for plotting
    %plotphase(df,1:numel(numcyc),s)
    plotphase = dawnphase+dawnphaseshift;
    plotphase = mod(plotphase,1);
    plotphase(plotphase > 0.2) = plotphase(plotphase > 0.2) - 1;
    
    %% select only those tau's where entrained stably
    STDEV_LIM = 0.01;
    
    NUMENTR=4; %for nonlinear case
    for b=boot
        for df=1:numel(dutyfrac)
            plotphase_stdev(df,b) = std(squeeze(plotphase(df,(end-NUMENTR):end,b)));
            [~,plotphase_stdev(df,b),~] = ...
                circleMean(squeeze(plotphase(df,(end-NUMENTR):end,b)),1,[]);
            if plotphase_stdev(df,b) > STDEV_LIM
                entrained(df,b) = 0;
            else
                entrained(df,b) = 1;
            end
        end
    end
    
    %display some entrainment stats
    disp(['Total no. linear sims.: ' num2str(numel(entrained))]);
    disp(['No. entrained linear sims.: ' num2str(sum(sum(entrained)))]);
    disp(['Frac entrained linear: ' num2str(...
        sum(sum(entrained))/...
        numel(entrained)...
        )]);
    
    %specifically for tau between 8 and 16
    gf = dutyfrac <= 16/24 & dutyfrac >= 8/24;
    disp(['Total no. linear sims. tau=6-18: ' num2str(numel(entrained(gf,:)))]);
    disp(['No. entrained linear sims. tau=6-18: ' num2str(sum(sum(entrained(gf,:))))]);
    disp(['Frac entrained linear tau=6-18: ' num2str(...
        sum(sum(entrained(gf,:)))/...
        numel(entrained(gf,:))...
        )]);
    
    %% plot avg phase+/-std for entrained tau's for second dataset
    %go through dfs, collect [tau, taustd]
    for df=1:numel(dutyfrac)
        tau(df) = dutyfrac(df);
        entr = logical(entrained(df,:));
        goodph = plotphase(df,end,entr);
        goodph = goodph(goodph < 0.33);
        %     taumean(df) = nanmean(goodph);
        %     taustd(df) = nanstd(goodph);
        [taumean(df), taustd(df), taubreakpt(df)] = circleMean(goodph, 1, []);
    end
    
    %go back to old figure
    figure(fErrorBar);
    %pErr2 = errorbar(24*dutyfrac,taumean,taustd,'gs-','linewidth',2);
    greenCol = [96 192 96]/255;
    pErr3=fill(24*[tau fliplr(tau)],...
        fvec([taumean+taustd fliplr(taumean-taustd)]), ...
        greenCol, 'linestyle','none','facealpha',0.5);
    
    %get rid of 2sigma on nonparam
    delete(pFill2);
    
    legend([pJanVitro,pFill,pErr3],...%, pFill2],...
        'in vitro \pm \sigma','simulation \pm \sigma','lin. simulation \pm \sigma',...
        'location','southeast');
    uistack(pJanVitro,'top');
    uistack(pMarVitro,'top');
    legend boxoff;
    %%
    if toexp_VitroSilico == 1
        export_fig([pwd '/' getDate('yyyy-mm-dd') '_fInVitroSilicoAndLin_'...
            'NonParamBoot' num2str(max(boot)) '_ErrorBar_' ...
            getDate()],...
            '-cmyk','-painters','-pdf',fErrorBar);
    end
    
end
