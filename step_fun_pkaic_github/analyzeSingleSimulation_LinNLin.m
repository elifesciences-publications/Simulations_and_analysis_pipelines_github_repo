%2017-03-29, EL: generate Figure 4-figSup1(B), Figure 4-figSup4(B)
%plot a single entrainment simulation using linear or nonlinear step functions
%
% This script loads results of simulations generated by
% runPhOsc_Boot_LinNLin_inKaiCPhaseUnits.m.
% These should be marked in the variables NONLIN_BOOT = [FILENAME] and LIN_BOOT =
% [FILENAME].
%
% This script also relies on step functions in the variable
% STEPFUN_BOOT=[FILENAME]. 
%
% dependencies: export_fig.m from FileExchange to export figures.

clear all;
%close all;
clc;
INDIR=['.'];
cd(INDIR);

%% pick which step functions you used in your simulations 
% STEPFUN_BOOT = ['../helper functions and shared files/'...
%     '2017-03-17_stepFun_inKaiCPhase_19.20.23.mat'];
STEPFUN_BOOT = ['2017-05-31_stepFun_Lin-NLin_May31_oldbreak_20_12.21.01.mat'];
STEPFUN_BOOT = ['2017-06-01_stepFun_May_fit_OrigFitter_4pi_100_18.24.40.mat'];
%% pick which datasets you want to analyze
%datasets generated from bootstrapped simulations based on...
%... nonlinear L and D funs (
NONLIN_BOOT = ['2017-06-01_OrigFitter_4pi_18.30.10_NonParamBoot_25.mat']; 
%... linearized versions of the same L and D funs
LIN_BOOT = [];

%use linear or nonlinear step funs?
TOPLOT_LIN_NONLIN = 0; %[0=use nonlin step funs sims, 1=use linearized] 

boot = [12]; %which simulations to do you want to run?
LO_PP = 4; %which range of photoperiods from the simulations to plot (in hours)
HI_PP = 18;
TOEXP_DOUBLEFIG = 0; %save fig?
TODISP = 1;

%% load in vitro data from entrainment expt. (Fig. 2-figSup2)
load(['../step_fun_analysis_github/helper functions and shared files/'...
    '2017-03-17_inVitroPP_fits_eachExpOwnPer_03.53.51.mat']); 
%add (7/6)*pi to make step fun data to correspond to KaiC phosphorylation phases
vitro.dawnPhase = vitro.dawnPhase + (7*pi/6); 

%% load step functions
%NOTE! must be in radians. don't normalize by 2*pi
load([INDIR '/' STEPFUN_BOOT]);

%% load simulation data from saved files
if TOPLOT_LIN_NONLIN == 0
    SIMULATION_BOOT = NONLIN_BOOT;
elseif TOPLOT_LIN_NONLIN == 1
    SIMULATION_BOOT = LIN_BOOT;
end
SIMULATION_BOOT = load(SIMULATION_BOOT);
SIM = SIMULATION_BOOT.VAR;
dawnphase = SIM.dawnphase;
duskphase = SIM.duskphase;
duskphaseshift = SIM.duskphaseshift;
dawnphaseshift = SIM.dawnphaseshift;
peakT = SIM.peakT;
TDRIVE=SIM.TDRIVE; %24.0;
dutyfrac=SIM.dutyfrac; %[4:1:18]/24;
numcyc = SIM.numcyc; %1:20;
TEND = SIM.TEND; %max(numcyc)*TDRIVE;

%% collect variables for plotting
plotphase = dawnphase+dawnphaseshift;
plotphase = mod(plotphase,1);
plotphase(plotphase > 0.3) = plotphase(plotphase > 0.3) - 1;

%% select only those taus where entrained stably
for b=boot
    NUMENTR=4;
    for df=1:numel(dutyfrac)
        plotphase_stdev(df,b) = std(squeeze(plotphase(df,(end-NUMENTR):end,b)));
        if plotphase_stdev(df,b) > 0.1
            entrained(df,b) = 0;
        else
            entrained(df,b) = 1;
        end
    end
end

%% set up colors just for pts in linear region
colorInd = dutyfrac >= LO_PP/24 & dutyfrac <= HI_PP/24;
numcolors = sum(colorInd);
colors = zeros(numel(dutyfrac),3);
colors(colorInd,:) = hot(numcolors);

%% plot entrained phase in silico vs in vitro
fInVitroSilico=figure();

subp1=subplot(1,3,1);
for b=boot
    if sum(entrained(:,b) > 0)
        entr = logical(entrained(:,b));
        pSilicoA(b)=plot(24*dutyfrac(entr), plotphase(entr,end,b), '-',...
            'linewidth',2);
        hold on;
    end
end

%plot with different colors for different taus
for b=boot
    for df=1:numel(dutyfrac)
        if entrained(df,b) & dutyfrac(df) > LO_PP/24 & dutyfrac(df) < HI_PP/24
            pSilico(b)=plot(24*dutyfrac(df), plotphase(df,end,b), 'o',...
                'markerfacecolor',colors(df,:),'markeredgecolor','k',...
                'markersize',6,'linewidth',0.1);
            hold on;
        end
    end
    %compute slope of simulated curve
    dfRange = dutyfrac > LO_PP/24 & dutyfrac < HI_PP/24;
    simSlope(b,:) = fitToLine(24*dutyfrac(dfRange),plotphase(dfRange,end,b)');
    dispif(TODISP,['boot ' num2str(b) ',' 10 'sim slope = ' num2str(simSlope(b,1),'%2.3f')]);
    %title(['boostrap no. ' num2str(b)]);
end
colormap(colors);
cbar=colorbar('ytick',[find(colorInd,1,'first'):4:find(colorInd,1,'last')],...
        'yticklabel',24*dutyfrac([find(colorInd,1,'first'):4:find(colorInd,1,'last')]),...
        'ylim',[find(colorInd,1,'first')-0.02 find(colorInd,1,'last')+0.02]);
title(cbar,'\tau');
    
z = 1/(2*pi);

vitro.dawnPhase = wrapVecAround(vitro.dawnPhase,0.2*2*pi,2*pi,'gt');

pJanVitro = errorbar(vitro.pp(vitro.janGoodPlt),...
     z*vitro.dawnPhase(vitro.janGoodPlt),...
     z*vitro.fitPhase_Err(vitro.janGoodPlt), 'cs',...
    'markersize',4,'markerfacecolor','c',...
    'markeredgecolor','c','linewidth',1);
hold on;
pMarVitro = errorbar(vitro.pp(vitro.marGoodPlt),...
    z*vitro.dawnPhase(vitro.marGoodPlt),...
    z*vitro.fitPhase_Err(vitro.marGoodPlt), 'co',...
    'markersize',4,'markerfacecolor','c',...
    'markeredgecolor','c','linewidth',1);

legend([pJanVitro, pMarVitro,pSilico(1)],...
    'in vitro (Jan)', 'in vitro (Mar)', ...
    'simulation','location','south');

hold on;
uistack(pMarVitro,'top');
uistack(pJanVitro,'top');

legend([pJanVitro,pSilicoA(b)],...
    'in vitro','simulation','location','south');
legend boxoff;
xlabel('day length \tau (hours)');
ylabel('oscillator phase at dawn (rad/2\pi)');
set(gca,'xlim',[0 24],'ylim',[-0.4 0.4],'xtick',0:6:24,'ytick',[-1:0.1:1]);
set(gca,'xdir','normal','ydir','reverse');
grid off;
%set(fInVitroSilico,'units','inches','position',[0 0 8 8]);

%% plot bootstrapped step functions
%fStepFuns=figure();
subp2=subplot(1,3,2:3);
for b=boot
    if sum(entrained(:,b) > 0)
        TLIGHT=T_hiATP(b);
        TDARK=T_loATP(b);
        STEPUP.phase = up.phase(b,:);
        STEPUP.phaseShift = up.phaseShift(b,:);
        STEPDOWN.phase = down.phase(b,:);
        STEPDOWN.phaseShift = down.phaseShift(b,:);
        
        %linearized versions
        STEPUP.linPhase = up.linPhase(b,:);
        STEPUP.linPhaseShift = up.linPhaseShift(b,:);
        STEPUP.linFit = up.linFit(b,:);
        STEPDOWN.linPhase = down.linPhase(b,:);
        STEPDOWN.linPhaseShift = down.linPhaseShift(b,:);       
        STEPDOWN.linFit = down.linFit(b,:);
        
        z=(1/(2*pi));
        XRNG=2*pi*[-1:0.01:1];
        
        %plot linearized step funs
        LW = [];
        if TOPLOT_LIN_NONLIN == 0 %use nonlinearized
            LW=2;
        elseif TOPLOT_LIN_NONLIN == 1 %plot linearized
%             plot(0.5*pi*z+z*STEPUP.linPhase,z*STEPUP.linPhaseShift,'b-','linewidth',2);
%             hold on;
%             plot(0.5*pi*z+z*STEPDOWN.linPhase,z*STEPDOWN.linPhaseShift','r-','linewidth',2);
            UP_LIN.phase = STEPUP.linPhase;
            UP_LIN.phaseShift = STEPUP.linPhaseShift;
            DOWN_LIN.phase = STEPDOWN.linPhase;
            DOWN_LIN.phaseShift = STEPDOWN.linPhaseShift;
            LW=2;
%             plot(z*XRNG,-getInVitroPhaseShiftBoot(XRNG,UP_LIN),...
%                 'b','linewidth',LW);
%             hold on;
%             plot(z*XRNG,-getInVitroPhaseShiftBoot(XRNG,DOWN_LIN),...
%                 'r','linewidth',LW);

%             plot(z*STEPUP.linPhase,z*STEPUP.linPhaseShift,'b-','linewidth',2);
%             hold on;
            for i=1:numel(XRNG)
                Y_UP(i) = -getInVitroPhaseShiftBoot(z*XRNG(i),UP_LIN);
                Y_DOWN(i) = -getInVitroPhaseShiftBoot(z*XRNG(i), DOWN_LIN);
            end
            plot(z*XRNG, Y_UP, 'b-','linewidth',LW);
            hold on;
            plot(z*XRNG, Y_DOWN,'r-','linewidth',LW);
%             plot(z*(STEPUP.linPhase-2*pi),z*STEPUP.linPhaseShift,'b-','linewidth',2);
%             hold on;
%             %plot(z*STEPDOWN.linPhase,z*STEPDOWN.linPhaseShift','r-','linewidth',2);
%             plot(z*(STEPDOWN.linPhase-2*pi),z*STEPDOWN.linPhaseShift','r-','linewidth',2);
            LW = 0.5;
        end
        
        figure(fInVitroSilico);
        subplot(subp2);
        %double plot interpolated step funs
        sUplt=plot(z*XRNG,-getInVitroPhaseShiftBoot(z*XRNG,STEPUP),...
            'b','linewidth',LW);
        hold on;
        sDplt=plot(z*XRNG,-getInVitroPhaseShiftBoot(z*XRNG,STEPDOWN),'r',...
            'linewidth',LW);
        
        %mark points used in entrained regime
        linDx = []; linLx = [];
        linDy = []; linLy = [];
        cnt = 1;
        for df=1:numel(dutyfrac)
            if entrained(df,b) & dutyfrac(df) > LO_PP/24 & ...
                    dutyfrac(df) < HI_PP/24
                plot(wrapVecAround(duskphase(df,end,b),0,1,'gt'),...
                    -duskphaseshift(df,end,b),'o',...
                    'markerfacecolor',colors(df,:),'markeredgecolor','k',...
                    'linewidth',0.1,'markersize',6);
                hold on;
                plot(wrapVecAround(dawnphase(df,end,b),0.6,1,'gt'),...
                    -dawnphaseshift(df,end,b),'o',...
                    'markerfacecolor',colors(df,:),'markeredgecolor','k',...
                    'linewidth',0.1,'markersize',6);
                
                %collect pts for lin fitting later
                linDx(cnt) = duskphase(df,end,b);
                linDy(cnt) = -duskphaseshift(df,end,b);
                linLx(cnt) = dawnphase(df,end,b);
                linLy(cnt) = -dawnphaseshift(df,end,b);
                cnt = cnt+1;
            end
        end
        
        %linearize L and D locally, in regions used in entrained regime
        loc_d = fitToLine(linDx,linDy);
        loc_l = fitToLine(linLx,linLy);
  
        title(['boostrap no. ' num2str(b)]);
        xlabel('phase (rad/2\pi)');
        ylabel('phase shift (rad/2\pi)');
        set(gca,'xtick',[-1:0.2:1],'ytick',[-0.4:0.1:0.4],...
            'xlim',[-1 1], 'ylim', [-1 1]);
        
        grid off;
        legend([sUplt, sDplt],'step up','step down','location','south');
        legend boxoff;
        
        cbar2=colorbar('ytick',[find(colorInd,1,'first'):4:find(colorInd,1,'last')],...
        'yticklabel',24*dutyfrac([find(colorInd,1,'first'):4:find(colorInd,1,'last')]),...
        'ylim',[find(colorInd,1,'first')-0.02 find(colorInd,1,'last')+0.02]);
        title(cbar2,'\tau');
    end
end

set(gcf,'units','inches','position',[0 0 12 4]);
if TOEXP_DOUBLEFIG == 1
    export_fig([getDate('yyyy-mm-dd') '_MixMatchNo' num2str(boot) ...
        '_LinBoot_simSlope_LDslope_' getDate() '.pdf'],...
        '-cmyk','-painters',gcf);
end


